@page "/index"
@using PRN222.Assignment.Blazor.Client.Components.Services
@using PRN222.Assignment.Services.Interfaces
@rendermode InteractiveServer
@inherits IndexBase
@inject IClientOrderService ClientOrderService
@inject OrderStateService OrderStateService
@inject NavigationManager NavigationManager


<h3>MilkTea POS</h3>

<div class="row">
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="input-group" style="max-width: 400px;">
                        <input type="text" class="form-control" placeholder="Search..." @bind="searchText" @bind:event="oninput" @onkeyup="SearchProducts">
                        <button class="btn btn-outline-secondary" type="button" @onclick="SearchProducts">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                    <button class="btn btn-primary">
                        <i class="bi bi-table"></i> Add Table
                    </button>
                </div>
            </div>
            <div class="card-body">
                <!-- Category tabs -->
                <div class="nav nav-tabs mb-3">
                    @foreach (var category in categories)
                    {
                        <button type="button" class="nav-link @(selectedCategoryId == category.CategoryId ? "active" : "")"
                                @onclick="() => SelectCategory(category.CategoryId)">
                            @category.CategoryName
                        </button>
                    }
                    <!-- Extra tabs for Toppings and Combos -->
                    <button class="nav-link @(showToppingsTab ? "active" : "")"
                            @onclick="ShowToppings">
                        Toppings
                    </button>
                    <button class="nav-link @(showCombosTab ? "active" : "")"
                            @onclick="ShowCombos">
                        Combos
                    </button>
                </div>

                <!-- Products grid -->
                @if (selectedCategoryId > 0 && !showToppingsTab && !showCombosTab)
                {
                    <div class="row row-cols-1 row-cols-md-3 g-4">
                        @if (filteredProducts.Any())
                        {
                            @foreach (var product in filteredProducts)
                            {
                                <div class="col">
                                    <div class="card h-100">
                                        <img src="@(string.IsNullOrEmpty(product.ImagePath) ? "/images/default-product.jpg" : product.ImagePath)"
                                             class="card-img-top" alt="@product.ProductName">
                                        <div class="card-body">
                                            <h5 class="card-title">@product.ProductName</h5>
                                            <p class="card-text">@string.Format("{0:N0} đ", product.BasePrice)</p>
                                            <div class="d-grid gap-2">
                                                <button class="btn btn-primary" @onclick="() => SelectProduct(product)">
                                                    <i class="bi bi-plus-circle"></i> Add to Cart
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col-12 text-center py-4">
                                <p>No products available in this category.</p>
                            </div>
                        }
                    </div>
                }

                <!-- Toppings grid -->
                @if (showToppingsTab)
                {
                    <div class="row row-cols-1 row-cols-md-3 g-4">
                        @foreach (var topping in displayedToppings)
                        {
                            <div class="col">
                                <div class="card h-100">
                                    <img src="@(string.IsNullOrEmpty(topping.ImagePath) ? "/images/default-topping.jpg" : topping.ImagePath)"
                                         class="card-img-top" alt="@topping.ToppingName">
                                    <div class="card-body">
                                        <h5 class="card-title">@topping.ToppingName</h5>
                                        <p class="card-text">@string.Format("{0:N0} đ", topping.Price)</p>
                                        <div class="d-grid gap-2">
                                            <button class="btn btn-primary" @onclick="() => SelectTopping(topping)">
                                                <i class="bi bi-plus-circle"></i> Add Topping
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }

                <!-- Combos grid -->
                @if (showCombosTab)
                {
                    <div class="row row-cols-1 row-cols-md-3 g-4">
                        @foreach (var combo in availableCombos)
                        {
                            <div class="col">
                                <div class="card h-100">
                                    <img src="@(string.IsNullOrEmpty(combo.ImagePath) ? "/images/default-combo.jpg" : combo.ImagePath)"
                                         class="card-img-top" alt="@combo.ComboName">
                                    <div class="card-body">
                                        <h5 class="card-title">@combo.ComboName</h5>
                                        <p class="card-text">@string.Format("{0:N0} đ", combo.TotalPrice)</p>
                                        <div class="d-grid gap-2">
                                            <button class="btn btn-primary" @onclick="() => SelectCombo(combo)">
                                                <i class="bi bi-plus-circle"></i> Add Combo
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Order Summary -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-header bg-light">
                <h5 class="card-title m-0">Order #@(currentOrder.OrderId > 0 ? currentOrder.OrderId.ToString() : "New")</h5>
            </div>
            <div class="card-body">
                @if (orderItems.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Item</th>
                                    <th>Qty</th>
                                    <th>Price</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in orderItems)
                                {
                                    <tr>
                                        <td>
                                            @item.ProductSize.Product.ProductName
                                            <small class="d-block text-muted">
                                                @item.ProductSize.Size.SizeName
                                                @if (item.OrderItemToppings.Any())
                                                {
                                                    <span>+@string.Join(", ", item.OrderItemToppings.Select(t => t.Topping.ToppingName))</span>
                                                }
                                            </small>
                                        </td>
                                        <td>@item.Quantity</td>
                                        <td>@((item.Subtotal ?? 0).ToString("C"))</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditOrderItem(item)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveOrderItem(item)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <span>@string.Format("{0:N0} đ",currentOrder.Subtotal)</span>
                    </div>
                    <div class="d-flex justify-content-between fw-bold">
                        <span>Total:</span>
                        <span>@string.Format("{0:N0} đ",currentOrder.TotalAmount)</span>
                    </div>

                    <div class="d-grid gap-2 mt-3">
                        <button class="btn btn-danger" @onclick="CancelOrder">Cancel Order</button>
                        <button class="btn btn-success" @onclick="ProceedToPayment">Pay</button>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="bi bi-cart text-muted" style="font-size: 3rem;"></i>
                        <p class="mt-3">No items in cart</p>
                        <p class="text-muted">Select products to add to your order</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Product Selection Modal -->
@if (selectedProduct != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedProduct.ProductName</h5>
                    <button type="button" class="btn-close" @onclick="CancelSelection"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Size</label>
                        <div class="btn-group w-100">
                            @foreach (var size in productSizes)
                            {
                                <input type="radio" class="btn-check" name="size" id="size-@size.SizeId"
                                       checked="@(selectedProductSizeId == size.ProductSizeId)"
                                       @onclick="() => selectedProductSizeId = size.ProductSizeId" />
                                <label class="btn btn-outline-primary" for="size-@size.SizeId">
                                    @size.Size.SizeName (@size.Price.ToString("C"))
                                </label>
                            }
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Toppings</label>
                        <div class="row">
                            @foreach (var topping in availableToppings.Where(t => t.IsAvailable))
                            {
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="@topping.ToppingId"
                                               id="topping-@topping.ToppingId"
                                               checked="@IsToppingSelected(topping.ToppingId)"
                                               @onchange="e => ToggleTopping(topping.ToppingId, e.Value)" />
                                        <label class="form-check-label" for="topping-@topping.ToppingId">
                                            @topping.ToppingName (@string.Format("{0:N0} đ", topping.Price))
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Quantity</label>
                        <div class="input-group">
                            <button class="btn btn-outline-secondary" type="button" @onclick="() => quantity = Math.Max(1, quantity - 1)">-</button>
                            <input type="number" class="form-control text-center" @bind="quantity" min="1" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="() => quantity += 1">+</button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Special Instructions</label>
                        <textarea class="form-control" rows="2" @bind="specialInstructions"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelSelection">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddToOrder">Add to Order</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Payment Modal -->
@if (showPaymentModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Payment</h5>
                    <button type="button" class="btn-close" @onclick="() => showPaymentModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Customer Address</label>
                        <input type="text" class="form-control" @bind="currentOrder.DeliveryAddress" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" rows="2" @bind="currentOrder.Notes"></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Payment Method</label>
                        <div class="d-flex gap-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="cash"
                                       checked="@(currentOrder.PaymentMethod == "Cash")"
                                       @onclick='() => currentOrder.PaymentMethod = "Cash"' />
                                <label class="form-check-label" for="cash">Cash</label>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <span>@string.Format("{0:N0} đ",currentOrder.Subtotal)</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Delivery Fee:</span>
                        <span>@string.Format("{0:N0} đ",currentOrder.DeliveryFee)</span>
                    </div>
                    <div class="d-flex justify-content-between fw-bold">
                        <span>Total:</span>
                        <span>@string.Format("{0:N0} đ",currentOrder.TotalAmount)</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showPaymentModal = false">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="PlaceOrder">Confirm Payment</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Success Modal -->
@if (showSuccessModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Order Placed Successfully</h5>
                    <button type="button" class="btn-close" @onclick="CloseSuccessModal"></button>
                </div>
                <div class="modal-body text-center">
                    <i class="bi bi-check-circle-fill text-success" style="font-size: 4rem;"></i>
                    <h4 class="mt-3">Thank you!</h4>
                    <p>Your order #@confirmedOrderId has been placed successfully.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="CloseSuccessModal">New Order</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}