@* path PRN222.Assignment.Blazor.Client/Components/Pages/Order.razor *@
@page "/order"
@rendermode InteractiveServer
@using PRN222.Assignment.Repositories.Entities
@using PRN222.Assignment.Services.Interfaces
@inject IClientOrderService ClientOrderService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h2>Tạo Order</h2>

    <div class="row mt-3">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs">
                        @foreach (var category in categories)
                        {
                            <li class="nav-item">
                                <button class="nav-link @(selectedCategoryId == category.CategoryId ? "active" : "")"
                                        @onclick="() => SelectCategory(category.CategoryId)">
                                    @category.CategoryName
                                </button>
                            </li>
                        }
                    </ul>
                </div>
                <div class="card-body">
                    <div class="row">
                        @if (products == null)
                        {
                            <p>Loading products...</p>
                        }
                        else if (!products.Any())
                        {
                            <p>No products available in this category.</p>
                        }
                        else
                        {
                            @foreach (var product in products)
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100">
                                        @if (!string.IsNullOrEmpty(product.ImagePath))
                                        {
                                            <img src="@product.ImagePath" class="card-img-top" alt="@product.ProductName" style="height: 150px; object-fit: cover;">
                                        }
                                        else
                                        {
                                            <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 150px;">
                                                <span class="text-muted">No Image</span>
                                            </div>
                                        }
                                        <div class="card-body">
                                            <h5 class="card-title">@product.ProductName</h5>
                                            <p class="card-text small">@(product.Description ?? "No description available")</p>
                                            <p class="card-text">
                                                <strong>
                                                    @string.Format("{0:N0} đ", product.BasePrice)
                                                </strong>
                                            </p>
                                            <button class="btn btn-primary btn-sm" @onclick="() => SelectProduct(product)">
                                                Select
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Your Order</h5>
                </div>
                <div class="card-body">
                    @if (selectedProduct != null)
                    {
                        <div class="selected-product mb-3 p-2 border rounded">
                            <h6>@selectedProduct.ProductName</h6>

                            <div class="form-group mt-2">
                                <label>Select Size:</label>
                                <select class="form-control" @bind="selectedProductSizeId">
                                    <option value="0">-- Select Size --</option>
                                    @foreach (var productSize in productSizes)
                                    {
                                        <option value="@productSize.ProductSizeId">
                                            @productSize.Size.SizeName - @string.Format("{0:N0} đ", productSize.Price)
                                        </option>
                                    }
                                </select>
                            </div>

                            <div class="form-group mt-2">
                                <label>Quantity:</label>
                                <input type="number" class="form-control" min="1" @bind="quantity" />
                            </div>

                            <div class="form-group mt-3">
                                <button class="btn btn-success" @onclick="AddToOrder"
                                        disabled="@(selectedProductSizeId == 0)">
                                    Add to Order
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="CancelSelection">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    }

                    @if (orderItems.Any())
                    {
                        <h6>Order Items:</h6>
                        <ul class="list-group">
                            @foreach (var item in orderItems)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @item.ProductSize.Product.ProductName (@item.ProductSize.Size.SizeName) × @item.Quantity
                                    <span>
                                        @string.Format("{0:N0} đ", item.UnitPrice * item.Quantity)
                                    </span>
                                </li>
                            }
                        </ul>

                        <div class="mt-3">
                            <p class="d-flex justify-content-between">
                                <span>Subtotal:</span>
                                <strong>
                                    @string.Format("{0:N0} đ", subtotal)
                                </strong>
                            </p>
                        </div>

                        <button class="btn btn-primary w-100 mt-3">
                            Proceed to Checkout
                        </button>
                    }
                    else if (selectedProduct == null)
                    {
                        <p class="text-muted">Select products to add to your order.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Category> categories = new List<Category>();
    private List<MilkTeaProduct> products = new List<MilkTeaProduct>();
    private List<ProductSize> productSizes = new List<ProductSize>();
    private int selectedCategoryId = 0;
    private MilkTeaProduct selectedProduct;
    private int selectedProductSizeId = 0;
    private int quantity = 1;

    // Order data
    private PRN222.Assignment.Repositories.Entities.Order currentOrder = new PRN222.Assignment.Repositories.Entities.Order
        {
            AccountId = 2,
            OrderDate = DateTime.Now,
            Status = "Pending",
            PaymentStatus = "Pending",
            PaymentMethod = "Cash",
            DeliveryAddress = "",
            Subtotal = 0,
            Tax = 0,
            DeliveryFee = 0,
            TotalAmount = 0
        };

    private List<OrderItem> orderItems = new List<OrderItem>();
    private decimal subtotal = 0;

    protected override async Task OnInitializedAsync()
    {
        // Load categories
        var allCategories = await ClientOrderService.GetAllCategoriesAsync();
        categories = allCategories.ToList();

        if (categories.Any())
        {
            selectedCategoryId = categories.First().CategoryId;
            await LoadProductsByCategory(selectedCategoryId);
        }
    }

    private async Task SelectCategory(int categoryId)
    {
        selectedCategoryId = categoryId;
        await LoadProductsByCategory(categoryId);
    }

    private async Task LoadProductsByCategory(int categoryId)
    {
        products = (await ClientOrderService.GetMilkTeaProductsByCategoryAsync(categoryId)).ToList();
    }

    private async Task SelectProduct(MilkTeaProduct product)
    {
        selectedProduct = product;
        selectedProductSizeId = 0;
        quantity = 1;

        // Load product sizes
        productSizes = (await ClientOrderService.GetProductSizesByProductIdAsync(product.ProductId)).ToList();

        // Load size details for each product size
        foreach (var productSize in productSizes)
        {
            productSize.Size = await ClientOrderService.GetSizeByIdAsync(productSize.SizeId);
        }
    }

    private void CancelSelection()
    {
        selectedProduct = null;
        selectedProductSizeId = 0;
        productSizes.Clear();
    }

    private async Task AddToOrder()
    {
        if (selectedProductSizeId == 0 || quantity < 1)
            return;

        var productSize = productSizes.FirstOrDefault(ps => ps.ProductSizeId == selectedProductSizeId);
        if (productSize == null)
            return;

        // Create new order item (not persisted to database yet)
        var orderItem = new OrderItem
            {
                OrderId = 0, // Temporary, will be set when order is created
                ProductSizeId = selectedProductSizeId,
                ProductSize = productSize, // For display purposes
                Quantity = quantity,
                UnitPrice = productSize.Price,
                Subtotal = productSize.Price * quantity
            };

        orderItems.Add(orderItem);

        // Update subtotal
        subtotal += (decimal)(orderItem.Subtotal ?? 0);

        // Reset selection
        CancelSelection();
    }
}