@page "/order"
@using PRN222.Assignment.Repositories.Entities
@using PRN222.Assignment.Services.Interfaces
@inject IMilkTeaProductService MilkTeaProductService
@inject IProductSizeService ProductSizeService

<h3 class="text-xl font-semibold mb-4">Order Milk Tea</h3>

@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <div class="grid grid-cols-2 gap-4">
        @foreach (var product in products)
        {
            <div class="p-4 border rounded shadow">
                <div class="flex flex-col gap-2">
                    <!-- Product Info -->
                    <div>
                        <h4 class="font-bold">@product.ProductName</h4>
                        <p class="text-sm text-gray-500">@product.Description</p>
                        <p class="text-green-600 font-semibold">@product.BasePrice.ToString("N0") đ</p>
                    </div>

                    <!-- Size Buttons -->
                    @if (productSizes.TryGetValue(product.ProductId, out var sizes))
                    {
                        <div class="flex flex-wrap gap-2 mt-2">
                            @foreach (var size in sizes)
                            {
                                var selected = selectedSizes.TryGetValue(product.ProductId, out var sel) && sel == size;
                                <button class=@($"px-3 py-1 rounded border {(selected ? "bg-blue-500 text-white" : "bg-white text-gray-700 border-gray-300")}")
                                        @onclick="@(() => SelectSize(product.ProductId, size))">
                                    @size
                                </button>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-sm text-gray-400 italic">No sizes</div>
                    }

                    <!-- Add Button -->
                    <div class="mt-3">
                        <button class="px-4 py-2 bg-green-500 text-white rounded disabled:opacity-50"
                                disabled="@(!selectedSizes.ContainsKey(product.ProductId))"
                                @onclick="() => AddToOrder(product.ProductId)">
                            Add
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<MilkTeaProduct>? products;
    private Dictionary<int, List<string>> productSizes = new();
    private Dictionary<int, string> selectedSizes = new();

    protected override async Task OnInitializedAsync()
    {
        products = MilkTeaProductService.GetMilkTeaProducts();

        foreach (var product in products)
        {
            var sizes = await ProductSizeService.GetProductSizesByProductIdAsync(product.ProductId);
            productSizes[product.ProductId] = sizes
                .Select(ps => ps.Size.SizeName)
                .Distinct()
                .ToList();
        }
    }

    private void SelectSize(int productId, string size)
    {
        selectedSizes[productId] = size;
    }

    private void AddToOrder(int productId)
    {
        var product = products?.FirstOrDefault(p => p.ProductId == productId);
        if (product != null && selectedSizes.TryGetValue(productId, out var size))
        {
            // This is where you would handle adding to cart/order
            Console.WriteLine($"Added {product.ProductName} - Size: {size}");

            // Show notification (replace with real toast system if available)
            _ = Task.Run(async () =>
            {
                await InvokeAsync(() =>
                    ToastMessage = $"✔️ Added {product.ProductName} ({size}) to order!");
                await Task.Delay(3000);
                await InvokeAsync(() => ToastMessage = null);
            });
        }
    }

    private string? ToastMessage;
}

@if (!string.IsNullOrEmpty(ToastMessage))
{
    <div class="fixed bottom-5 right-5 bg-green-500 text-white px-4 py-2 rounded shadow">
        @ToastMessage
    </div>
}
