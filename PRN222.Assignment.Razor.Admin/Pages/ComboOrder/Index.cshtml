@page
@model PRN222.Assignment.Razor.Admin.Pages.ComboOrder.IndexModel
@{
    ViewData["Title"] = "Combo Orders";
}

<style>
    body {
        background-image: url('/images/background.jpg');
        background-size: cover;
        background-attachment: fixed;
        background-position: center;
    }

    .content-wrapper {
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .card {
        background-color: rgba(255, 255, 255, 0.95);
    }
</style>

<div class="container-fluid mt-4">
    <div class="content-wrapper">
        <div class="card shadow">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h3 class="m-0">Combo Orders Management</h3>
                <a asp-page="Create" class="btn btn-success">
                    <i class="fas fa-plus-circle"></i> Create New
                </a>
            </div>
            <div class="card-body">
                <!-- Search and Filter -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" id="searchInput" class="form-control" placeholder="Search orders...">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" id="searchButton">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex justify-content-end">
                            <select id="filterStatus" class="form-select me-2">
                                <option value="">All Orders</option>
                                <option value="pending">Pending</option>
                                <option value="completed">Completed</option>
                                <option value="cancelled">Cancelled</option>
                            </select>
                            <button id="exportButton" class="btn btn-outline-success">
                                <i class="fas fa-file-export"></i> Export
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Orders Table -->
                <div class="table-responsive">
                    <table class="table table-hover table-striped" id="comboOrdersTable">
                        <thead class="table-light">
                            <tr>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark d-flex align-items-center" data-sort="quantity">
                                        @Html.DisplayNameFor(model => model.OrderCombo[0].Quantity)
                                        <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark d-flex align-items-center" data-sort="price">
                                        @Html.DisplayNameFor(model => model.OrderCombo[0].UnitPrice)
                                        <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark d-flex align-items-center" data-sort="combo">
                                        @Html.DisplayNameFor(model => model.OrderCombo[0].Combo)
                                        <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark d-flex align-items-center" data-sort="address">
                                        @Html.DisplayNameFor(model => model.OrderCombo[0].Order)
                                        <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>Total Amount</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.OrderCombo)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Quantity)
                                    </td>
                                    <td>
                                        $@Html.DisplayFor(modelItem => item.UnitPrice)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Combo.ComboName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Order.DeliveryAddress)
                                    </td>
                                    <td>
                                        $@(item.Quantity * item.UnitPrice)
                                    </td>
                                    <td>
                                        @{
                                            string badgeClass = "badge bg-info";
                                            string status = "Processing";

                                            // This is a placeholder. Use actual status logic based on your data model
                                            if (item.OrderComboId % 3 == 0)
                                            {
                                                badgeClass = "badge bg-success";
                                                status = "Completed";
                                            }
                                            else if (item.OrderComboId % 5 == 0)
                                            {
                                                badgeClass = "badge bg-danger";
                                                status = "Cancelled";
                                            }
                                        }
                                        <span class="@badgeClass">@status</span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-page="./Edit" asp-route-id="@item.OrderComboId" class="btn btn-sm btn-primary me-1" data-bs-toggle="tooltip" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <a asp-page="./Details" asp-route-id="@item.OrderComboId" class="btn btn-sm btn-info me-1" data-bs-toggle="tooltip" title="Details">
                                                <i class="fas fa-info-circle"></i>
                                            </a>
                                            <a asp-page="./Delete" asp-route-id="@item.OrderComboId" class="btn btn-sm btn-danger" data-bs-toggle="tooltip" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item disabled">
                            <a class="page-link" href="#" tabindex="-1">Previous</a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#">Next</a>
                        </li>
                    </ul>
                </nav>

                <!-- Order Summary -->
                <div class="row mt-4">
                    <div class="col-md-4">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h5 class="card-title">Order Summary</h5>
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Total Orders
                                        <span class="badge bg-primary rounded-pill">@Model.OrderCombo.Count</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Completed Orders
                                        <span class="badge bg-success rounded-pill">@Model.OrderCombo.Count(o => o.OrderComboId % 3 == 0)</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Pending Orders
                                        <span class="badge bg-info rounded-pill">@Model.OrderCombo.Count(o => o.OrderComboId % 3 != 0 && o.OrderComboId % 5 != 0)</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Cancelled Orders
                                        <span class="badge bg-danger rounded-pill">@Model.OrderCombo.Count(o => o.OrderComboId % 5 == 0)</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            // Search functionality
            document.getElementById('searchButton').addEventListener('click', function() {
                const searchValue = document.getElementById('searchInput').value.toLowerCase();
                const table = document.getElementById('comboOrdersTable');
                const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

                for (let i = 0; i < rows.length; i++) {
                    const rowText = rows[i].textContent.toLowerCase();
                    if (rowText.includes(searchValue)) {
                        rows[i].style.display = '';
                    } else {
                        rows[i].style.display = 'none';
                    }
                }
            });

            // Filter functionality
            document.getElementById('filterStatus').addEventListener('change', function() {
                const filterValue = this.value.toLowerCase();
                const table = document.getElementById('comboOrdersTable');
                const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

                if (filterValue === '') {
                    for (let i = 0; i < rows.length; i++) {
                        rows[i].style.display = '';
                    }
                    return;
                }

                for (let i = 0; i < rows.length; i++) {
                    const statusCell = rows[i].getElementsByTagName('td')[5];
                    const statusText = statusCell.textContent.toLowerCase();

                    if (statusText.includes(filterValue)) {
                        rows[i].style.display = '';
                    } else {
                        rows[i].style.display = 'none';
                    }
                }
            });

            // Basic sorting functionality (can be improved with advanced sorting logic)
            const sortLinks = document.querySelectorAll('[data-sort]');
            sortLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const column = this.getAttribute('data-sort');
                    sortTable(column);
                });
            });

            function sortTable(column) {
                // Implement sorting logic here based on the column
                console.log('Sorting by ' + column);
                // This would be implemented with more advanced logic in a production environment
            }

            // Export button (placeholder)
            document.getElementById('exportButton').addEventListener('click', function() {
                alert('Export functionality would be implemented here!');
                // In a real implementation, this would generate CSV/Excel file for download
            });
        });
    </script>
}